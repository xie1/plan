设计模式之六大原则
1、单一职责原则：即一个类只负责一项职责。
2、里氏替换原则：子类可以扩展父类的功能，但不能改变父类原有的功能。（尽量不要去重写父类的方法）
							1、子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
							2、子类中可以增加自己特有的方法。
							3、当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
							4、当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。
							
				class A{
        public int func1(int a, int b){
            return a-b;
        }
    }

    public class Client{
        public static void main(String[] args){
            A a = new A();
            System.out.println("100-50="+a.func1(100, 50));
            System.out.println("100-80="+a.func1(100, 80));
        }
    }
    运行结果：
    100-50=50  
		100-80=20
     class B extends A{
        public int func1(int a, int b){
            return a+b;
        }

        public int func2(int a, int b){
            return func1(a,b)+100;
        }
    }

    public class Client{
        public static void main(String[] args){
            B b = new B();
            System.out.println("100-50="+b.func1(100, 50));
            System.out.println("100-80="+b.func1(100, 80));
            System.out.println("100+20+100="+b.func2(100, 20));
        }
    }
    
    类B完成后，运行结果：
    
    
    
3、依赖倒置原则；高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象（面向接口编程）

4、接口隔离原则：
	 接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。
	 为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。
	提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情
5、迪米特法则 ：一个对象应该对其他对象保持最少的了解（只与直接的朋友通信）
6、开闭原则；对扩展开放，对修改关闭