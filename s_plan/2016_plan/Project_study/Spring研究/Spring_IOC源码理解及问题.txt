IOC容器：
1、在没有IOC容器管理之前，对象和对象的关联调用是怎么进行的，有了IOC容器之后，对象和对象是怎么操作的？
2、IOC容器具体的注入实现中：接口注入、（setter注入、构造器注入）
3、Spring的IOC容器系列：BeanFactory(基本)和ApplicationContext
4、BeanFactory是一个Factory，也是IoC容器或对象工厂，FactoryBean，是一个能产生或者修饰对象生成的工厂Bean
5、IoC容器实现中关键的类（Resource（资源）、DefaultListableBeanFactory（基本容器）、BeanDefinitionReader（bean流））
6、IoC容器的初始化过程：（BeanDefinition的Resouce定位，载入（还有解析）和注册三个过程）
7、Bean定义的载入和依赖注入是两个独立过程（依赖注入一般发生在应用第一次通过getBean向容器索取bean的时候）
8、BeanDefiniton载入过程，相当于把定义的BeanDefinition在Ioc容器中转化成一个Spring内部表示的数据结构的过程
9、refresh方法是容器启动开始
10、Ioc容器初始化过程完成了主要工作是在IoC容器中建立BeanDefinition数据映射
11、Ioc容器对bean的依赖注入，getBean是依赖注入的起点，之后会调用createBean
12、Ioc容器中的Bean生命周期：Bean实例创建，为Bean实例设置属性，调用Bean的初始化方法，应用可以通过Ioc容器使用Bean，当容器关闭时，调用Bean的销毁方法
13、容器的基本工作原理
Spring AOP：
1、Advice通知：定义在连接点做什么，为切面增强提供织入接口。
2、Pointcut切点：决定Advice通知应该作用于哪个连接点。
3、Advisor通知器：完成对目标方法的切面增强设计（Advice）和关注点的设计（Pointcut）以后，需要一个对象把他们结合起来，完成这个作用就是Advisor
4、SpringAop的设计及实现
5、JDK生成AopProxy代理对象及CGLIB生成AopProxy代理对象
6、SpringAop拦截器调用的实现：
在SpringAop通过JDK的Proxy方式或CGLib方式生成代理对象的时候，相关的拦截器已经配置到代理对象中去，拦截器在代理对象中起作用是通过对这些方法的回调完成。
Spring组件：
1、Springmvc（164）